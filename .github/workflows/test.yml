name: GitHub Actions to add logs to test.txt file
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  push:
    branches: 
    - main
jobs:
  Write-push-details-on-test-txt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Install Salesforce CLI
        run: |
          # echo Install Salesforce CLI
          # npm install sfdx-cli -g
          
      - name: Deploy to Salesforce
        run: |
          # echo "Authenticating with Salesforce..."
          # echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > privateKey.key
          # sfdx force:auth:jwt:grant -i ${{ secrets.SALESFORCE_CONSUMER_KEY }} -f privateKey.key --username=${{ secrets.SALESFORCE_DEVHUB_USERNAME}} -d -a devjwt

          # Get the latest commit hash on the main branch
          LATEST_COMMIT=$(git rev-parse HEAD)

          # Get the hash of the commit before the latest one on the main branch
          PREVIOUS_COMMIT=$(git rev-parse HEAD^ 2>/dev/null)

          if [ -z "$PREVIOUS_COMMIT" ]; then
            echo "No previous commit found. Assuming the first commit."
            CHANGED_FILES=$(git ls-tree --name-only -r $LATEST_COMMIT)
          else
            # Get list of changed files between the latest and previous commits
            echo "Retrieving changed files..."
            CHANGED_FILES=$(git diff --name-only $PREVIOUS_COMMIT $LATEST_COMMIT)
          fi

          # Generate manifest file
          echo '<?xml version="1.0" encoding="UTF-8"?>
          <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types>' > $MANIFEST_FILE

          for FILE in $CHANGED_FILES; do
            echo "    <members>${FILE}</members>" >> $MANIFEST_FILE
          done

          echo '    <name>ApexClass</name>
            </types>
            <version>54.0</version>
          </Package>' >> $MANIFEST_FILE

          echo "Manifest file created: $MANIFEST_FILE"
          cat $MANIFEST_FILE
          
          # echo "Deploying to Salesforce..."
          # sfdx force:source:deploy -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} --sourcepath force-app/main/default --testlevel NoTestRun --loglevel debug
          
          # # Check deployment status
          # DEPLOY_STATUS=$(sfdx force:source:deploy:report -u ${{ secrets.SALESFORCE_DEVHUB_USERNAME}} | grep "Status")
          # echo "Deployment Status: $DEPLOY_STATUS"